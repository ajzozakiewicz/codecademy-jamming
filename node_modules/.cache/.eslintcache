[{"/Users/dustyneubauer/projects/codecademy-jamming/src/index.js":"1","/Users/dustyneubauer/projects/codecademy-jamming/src/reportWebVitals.js":"2","/Users/dustyneubauer/projects/codecademy-jamming/src/Components/App/App.js":"3","/Users/dustyneubauer/projects/codecademy-jamming/src/Components/Playlist/Playlist.js":"4","/Users/dustyneubauer/projects/codecademy-jamming/src/Components/SearchBar/SearchBar.js":"5","/Users/dustyneubauer/projects/codecademy-jamming/src/Components/SearchResults/SearchResults.js":"6","/Users/dustyneubauer/projects/codecademy-jamming/src/Components/TrackList/TrackList.js":"7","/Users/dustyneubauer/projects/codecademy-jamming/src/Components/Track/Track.js":"8","/Users/dustyneubauer/projects/codecademy-jamming/src/util/Spotify.js":"9"},{"size":553,"mtime":1667587170463,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1667585856189,"results":"12","hashOfConfig":"11"},{"size":2252,"mtime":1667835702316,"results":"13","hashOfConfig":"11"},{"size":746,"mtime":1667823493491,"results":"14","hashOfConfig":"11"},{"size":634,"mtime":1667823259211,"results":"15","hashOfConfig":"11"},{"size":398,"mtime":1667689103264,"results":"16","hashOfConfig":"11"},{"size":683,"mtime":1667823069280,"results":"17","hashOfConfig":"11"},{"size":1068,"mtime":1667823073452,"results":"18","hashOfConfig":"11"},{"size":2935,"mtime":1667835704822,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7s9d64",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"/Users/dustyneubauer/projects/codecademy-jamming/src/index.js",[],[],"/Users/dustyneubauer/projects/codecademy-jamming/src/reportWebVitals.js",[],[],"/Users/dustyneubauer/projects/codecademy-jamming/src/Components/App/App.js",["49"],[],"import './App.css';\nimport React from 'react';\n\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { Playlist } from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      searchResults: [],                 \n      playlistName: 'playlist1',\n      playlistTracks: []\n    };\n    this.addTrack= this.addTrack.bind(this);\n    this.removeTrack= this.removeTrack.bind(this);\n    this.updatePlaylistName=this.updatePlaylistName.bind(this);\n    this.savePlaylist=this.savePlaylist.bind(this);\n    this.search=this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    this.state.playlistTracks.push(track);\n    this.setState({playlistTracks: this.state.playlistTracks});\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n  }\n\n  updatePlaylistName(myPlaylistName){\n    this.setState({playlistName: myPlaylistName });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() =>{\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: [],\n      })\n    })\n  }\n\n  search(searchTerm){\n    Spotify.search(searchTerm).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n  }\n\n  render(){\n   return( <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n        <SearchBar onSearch={this.search}/>\n    <div className=\"App-playlist\">\n        <SearchResults searchResults={this.state.searchResults} \n                       onAdd={this.addTrack}\n                       onRemove={this.removeTrack}/>\n        <Playlist playlistName={this.state.playlistName} \n                  playlistTracks={this.state.playlistTracks} \n                  onNameChange={this.state.updatePlaylistName}\n                  onSave={this.state.savePlaylist}/>\n    </div>\n  </div>\n</div>\n   )\n  }\n}\n\nexport default App;\n","/Users/dustyneubauer/projects/codecademy-jamming/src/Components/Playlist/Playlist.js",[],[],"/Users/dustyneubauer/projects/codecademy-jamming/src/Components/SearchBar/SearchBar.js",[],[],"/Users/dustyneubauer/projects/codecademy-jamming/src/Components/SearchResults/SearchResults.js",[],[],"/Users/dustyneubauer/projects/codecademy-jamming/src/Components/TrackList/TrackList.js",[],[],"/Users/dustyneubauer/projects/codecademy-jamming/src/Components/Track/Track.js",[],[],"/Users/dustyneubauer/projects/codecademy-jamming/src/util/Spotify.js",["50","51","52","53"],[],"import { SearchBar } from \"../Components/SearchBar/SearchBar\";\nimport { Track } from \"../Components/Track/Track\";\n\nconst clientID = '5798d62e06134ef09bccada28de9faae'\n\nconst URI = 'http://localhost:3000/'\n\nlet userToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (userToken){\n            return userToken;\n        }\n\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessToken && expiresIn){\n            userToken = accessToken[1];\n            const expiresInMatch = Number(expiresIn[1]);\n\n            //clears the parameters allowing the method to grab a new access token when the other token expires\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n        } else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${URI}`\n        \n            window.location = accessUrl;\n        }\n    },\n\n    search(searchTerm){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${accessToken}`, \n        {headers: \n            {Authorization: `Bearer ${accessToken}`}\n        })\n        .then(response => {return response.json()})\n        .then(jsonResponse => {\n            if (!jsonResponse.tracks){\n                return []\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n\n            }));\n        });\n    },\n\n    savePlaylist(playlistName, trackUris){\n        if (!playlistName || !trackUris){\n            return; \n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers})\n        .then(response => response.json())\n        .then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: playlistName})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                });\n            })\n        })\n    }\n\n};\n\nexport default Spotify;",{"ruleId":"54","severity":1,"message":"55","line":35,"column":5,"nodeType":"56","messageId":"57","endLine":35,"endColumn":11},{"ruleId":"54","severity":1,"message":"58","line":1,"column":10,"nodeType":"56","messageId":"57","endLine":1,"endColumn":19},{"ruleId":"54","severity":1,"message":"59","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":15},{"ruleId":"54","severity":1,"message":"60","line":21,"column":19,"nodeType":"56","messageId":"57","endLine":21,"endColumn":33},{"ruleId":"61","severity":1,"message":"62","line":24,"column":37,"nodeType":"56","messageId":"63","endLine":24,"endColumn":48},"no-unused-vars","'tracks' is assigned a value but never used.","Identifier","unusedVar","'SearchBar' is defined but never used.","'Track' is defined but never used.","'expiresInMatch' is assigned a value but never used.","no-const-assign","'accessToken' is constant.","const"]